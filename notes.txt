Performance improvements!
    - It takes about a second to process ~100 AI doing random moves. Why?
    TODO: Profiling

Entity Actions require:
    * Entity being acted on
    * Stage on which the action is taking place
        - If the entity has a reference to its own level, this is superfluous.
    * Additional information for the specific action

AI, in order to generate an action, thus require:
    * The entity associated with that AI
    * The level on which the entity is on
    * Additional information generated when determining action.

NPC:
    AIController controller;
    Stage level;
    controller.nextAction(this, level);

Rendering notes:
    * GameScreen has everything necessary to draw the roguelike adventure screen.
    * Thus it has:
        Level
            * Tiles
            * Entities
            * Items
        Other UI elements
            * Player stats
            * Player Skills

Screens:
    TitleScreen
    NewGameScreen
    KingdomScreen
    LoadGameScreen
    GameScreen - Responsible for rendering and handling input for roguelike mode
        LevelRenderer - Given a level and a hero, draws the appropriate tiles. Consider if it needs a Hero, or a FieldOfView
        Level - Needed to know size of the level to clamp the camera
        Hero - Needed for position for the camera to follow


Services:
    GameService: Responsible for saving and loading the game
    ScreenService: Responsible for creating the appropriate screens

Flow:
    TitleScreen
        -> Quickstart
            - Create SaveGame
            - Create Kingdom
            - Savegame.setKingdom(...)
            - Create Zone
            - SaveGame.add(zone)
            - Create Hero
            - Add Hero to first level
            * Necessary for setting the level ID
            - gameService.saveGame(...)
        -> New game
            - NewGame Screen
                * Create savegame
                * Create kingdom
                * saveGame.setKingdom(kingdom)
                * GameService.saveGame(...)
            - KingdomScreen
                - Create Zone
                - SaveGame.addZone(zone)
                - Create Hero
                - Add hero to level
                - saveGame(...)

Services:
    GameService:
        Creates the metadata for a new game
        Handles loading a game to the correct screen
    ZoneService:
        Creates a new zone and persists it?
    LevelService:
        Used to create an individual level
        Responsible for saving an individual level when saving the game
        Responsible for handling hero changing level (?)
    ItemService (?)
    EntityService (?)


Level:
    * Consider just having a map of Position -> Tile.
    * Same with Position -> Actor, or Actor -> Position?

Abilities, Attributes, and Effects:
    Entities have Attributes // E.g. Health, MaxHealth
    Entities have Abilities // E.g. Attack, CastSpell
    Entities have Tags // E.g. Stunned, Levitating, etc.
    Attributes have a baseValue and currentValue
    Attributes can have their baseValue modified
    Attribute's currentValue is calculated on-demand
    Attribute's final value can be clamped. This is done in the AttributeSet.
        * TODO: How to make some of this easier to remember.
    Effects can modify Attributes
    Effects have a duration
        * Instant
            - Modify an attribute's baseValue
            - Cannot add tags, even for a turn.
        * Temporary
            - Modify an attribute's currentValue
            - Can add tags until it expires
            - Has duration: # of turns, or permanent
        * Periodic
            - Modify an attribute's baseValue each turn
            - Can add tags until it expires.
            - Has duration: # of turns, or permanent
            - Can have delay between invocations
    Effects can add tags for their duration
    Abilities can require tags to be used
    Abilities can be blocked by tags
    Abilities can have a cost
    Abilities can have a cooldown

Items:
    Items have a rarity
        Common, Uncommon, Rare, Exotic (random artifacts, Legendary (fixed artifact)
    Items have a base material
        // Metals
        Iron, Steel, Mithril, Adamantium, etc.
        // Other
        Wood -- staves, arrows, etc.
        Glass -- potions
        Paper -- scrolls, books
    Items can be broken down into components
    Items can be created by their components
    Items could have a weight
    Items have a base value, which is then modified by material, enchantments, etc.

Popups:
    Regular input processor goes:
        AdventureProcessor (for player commands)
        Stage
    When doing a popup, processor should go:
        Stage
    When popup is closed, processor should be back to:
        AdventureProcessor
        Stage

Zone Generation:
    Zones will have
        Depth
        Population Density (?)
        Type (e.g. Castle, Demon realm, etc.)
    Levels will have
        Length
        Width
        LevelGeneratorStrategy generates the Tiles
        Then it is populated with items
        Then it is populated with NPCs


Input Handling:
    We have say, the GameScreen, which has an InputProcessor.
    The input processor can change based on the Player's state
    For example:
        PlayerState -> AutoExplore
        Any key press should pop the autoexplore state back to normal
        AutoExplore should automatically assign actions to the user

        PlayerState -> Normal
        'z' should put the player state to AutoExplore

        PlayerState -> Resting
        'R' should put the player to resting.
        Any key press should cancel this state
        While health < Maximum, get rest action.

Hero State Machine:
    Hero has a StateMachine
    States have Transitions (essentially, next state)
    e.g. state.transition(nextState)

SaveGames:
    * Id
    * Kingdom
        * Kingdom information here, inn, etc.
    * Zones // Optional, all the zones we have been to.
    * Level // Optional, when we are on an adventure. If we have a level, we should load into it.
    * Last Played // Timestamp that let's us order the games by most recently played to last
    *

Saving Items:
    An item can be either
        a) In an inventory
        b) On the ground in a level

Saving a Level:
    A level is persisted via it's basic attributes
        width, height, RNG seed (?)
    and a corresponding list of events that alter the structure of the level
        GenerationEvent
            Seed (?)
            Generator
        DoorOpened
        DoorClosed
        WallDestroyed (?)
        WallCreated (?)

Changing levels:
    Zone could have a current level index? Seems clunky.
    Zone has List<Level>... we have the level we are on.. can we call zone.nextLevel(Level level)?
    When do we generate the levels for the zone? When the zone is created? Currently no. Thus we will have to create
        the next level. Alternatively, can create all levels for the zone at once.
    We may want to consider when we create the levels we do create them with an ID, and then we just look them up by ID.
    We may want to consider a Level tracking transitions separately?
    Other things to consider:
        Each level has a link to nextLevel and previousLevel (by id? null if top or bottom of dungeon)
        Each stair has a link to target level, and target position (makes it easier to allow stairs from 1 -> 3, and multiple stairs)
            * Could require the entire zone to be created at once. At least the structure of each level. Then, we could populate on first visit.

    Zone Creation algorithm:
        Determine depth (random 3-5)
        Generate # depth levels
        Link levels via TransitionFeatures
        Have to consider how to save features - especially these transitions.

    Problems:
        * If we have a ChangeLevelAction, how do we determine the level to transition to?
            - Need a ZoneRepository / ZoneService
                - We can just retrive this from service locator
            - Do we consider moving Level::process() -> GameScreen?
        *